#include<string>
using namespace std;
class integer
{
        private:
                int sign,len;
                string value;
        public:
    	        integer();
    	        integer(integer& number);
    	        integer(string number);
    	        ~integer();
    	        string signed_number();
    	        string unsigned_number();
    	        integer operator-();
    	        integer abs();
    	        bool operator<(integer number);
    	        bool operator>(integer number);
    	        bool operator==(integer number);
    	        bool operator<=(integer number);
    	        bool operator>=(integer number);
    	        bool operator!=(integer number);
    	        integer& operator=(string number);
    	        integer& operator=(integer& number);
};
integer::integer()
{
	sign=0;
	value="0";
	len=0;
}
integer::integer(integer& number)
{
	sign=number.sign;
	value=number.value;
	len=number.len;
}
integer::integer(string number)
{
	if(number[0]=='0')
	{
		sign=0;
		value="0";
		len=0;
		return;
	}
	if(number[0]=='-')sign=-1;
	else sign=1;
	if(number[0]=='+' or number[0]=='-')
	{
		len=number.length()-1;
		value=number.substr(1,len);
	}
	else
	{
		len=number.length();
		value=number.substr(0,len);
	}
}
integer::~integer()
{
	return;
}
string integer::signed_number()
{
	if(sign==0)return "0";
	if(sign==1)return ("+"+value);
	if(sign==-1)return ("-"+value);
}
string integer::unsigned_number()
{
	if(sign==0)return "0";
	if(sign==1)return value;
	if(sign==-1)return ("-"+value);
}
integer integer::operator-()
{
	integer number(*this);
	number.sign*=-1;
	return number;
}
integer integer::abs()
{
	if(sign!=-1)return *this;
	integer number(*this);
	number.sign*=-1;
	return number;
}
bool integer::operator<(integer number)
{
	if(sign!=number.sign)return sign<number.sign;
	if(len!=number.len)return len*sign<number.len*number.sign;
	return value<number.value;
}
bool integer::operator>(integer number)
{
	if(sign!=number.sign)return sign>number.sign;
	if(len!=number.len)return len*sign>number.len*number.sign;
	return value>number.value;
}
bool integer::operator==(integer number)
{
	return (sign==number.sign and value==number.value);
}
bool integer::operator<=(integer number)
{
	return !((*this)>number);
}
bool integer::operator>=(integer number)
{
	return !((*this)<number);
}
bool integer::operator!=(integer number)
{
	return !((*this)==number);
}
integer& integer::operator=(string number)
{
	if(number[0]=='0')
	{
		sign=0;
		value="0";
		len=0;
		return *this;
	}
	if(number[0]=='-')sign=-1;
	else sign=1;
	if(number[0]=='+' or number[0]=='-')
	{
		len=number.length()-1;
		value=number.substr(1,len);
	}
	else
	{
		len=number.length();
		value=number.substr(0,len);
	}
	return *this;
}
integer& integer::operator=(integer& number)
{
	sign=number.sign;
	value=number.value;
	len=number.len;
	return *this;
}
